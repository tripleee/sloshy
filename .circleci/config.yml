# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference

# For a detailed guide to building and testing with Python, read the docs:
# https://circleci.com/docs/language-python/ for more details
version: 2.1

# Orbs are reusable packages of CircleCI configuration that you may share across projects, enabling you to create encapsulated, parameterized commands, jobs, and executors that can be used across multiple projects.
# See: https://circleci.com/docs/orb-intro/
orbs:
  # See the Python orb documentation here: https://circleci.com/developer/orbs/orb/circleci/python
  python: circleci/python@2.1.1

# Orchestrate jobs using workflows
# See: https://circleci.com/docs/workflows/ & https://circleci.com/docs/configuration-reference/#workflows
workflows:
  nightly:
    jobs:
      - nightly:
          # Only build master branch
          filters:
            branches:
              only: master
          context:
          - sloshy

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/jobs-steps/#jobs-overview & https://circleci.com/docs/configuration-reference/#jobs
jobs:
  nightly:
    # Specify the execution environment. You can specify an image from Docker Hub or use one of our convenience images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/executor-intro/ & https://circleci.com/docs/configuration-reference/#executor-job
    docker:
      # Specify the version you desire here
      # See:https://circleci.com/developer/images/image/cimg/python
      - image: cimg/python:3.12

    # Add steps to the job
    # See: https://circleci.com/docs/jobs-steps/#steps-overview & https://circleci.com/docs/configuration-reference/#steps
    steps:
      # Checkout the code as the first step.
      - checkout
      - run:
          name: Scan all rooms, emit thawing notices where warranted
          no_output_timeout: 30m
          command: |
            commit_timestamp=$(git log --no-walk --format=%at HEAD)
            commit_age=$(($(date -u +%s) - commit_timestamp))
            if ((commit_age < 3600)); then
                echo $commit_age '<' 3600 -- aborting
                exit 0
            fi
            # If we are still here, the latest commit was more than an hour ago
            pip3 install -r requirements.txt
            python3 ./run.py --circle-ci
            curl -s https://hc-ping.com/${SLOSHY_HEALTHCHECK_UUID}
